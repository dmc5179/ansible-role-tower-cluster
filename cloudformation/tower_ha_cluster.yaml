---
AWSTemplateFormatVersion: 2010-09-09

Description: Create Ansible Tower 3 Node HA Cluster

Parameters:

  VpcId:
    Description: The VPC-scoped resources will belong to this VPC.
    Type: AWS::EC2::VPC::Id

  HostedZoneId:
    Description: The Route53 public zone ID to register the targets with, such as Z21IXYZABCZ2A4.
    Type: String
    Default: ''

  HostedZoneName:
    Description: The Route53 zone to register the targets with, such as example.com. Omit the trailing period.
    Type: String
    Default: "example.com"

  TowerAdminPassword:
    Description: Ansible Tower admin password.
    Type: String
    Default: "redhat2020"

  DatabaseAdminPassword:
    Description: Database Admin Password. No special characters.
    Type: String
    Default: "redhat2020"

  RabbitMQPassword:
    Description: RabbitMQ Password. No special characters.
    Type: String
    Default: "redhat2020"

  RabbitMQCookie:
    Description: RabbitMQ Cookie. No special characters.
    Type: String
    Default: "cookiemonster"

  PublicSubnet:
    Description: Public Subnet in AZ 1
    Type: AWS::EC2::Subnet::Id
    Default: ''

  PublicSubnet2:
    Description: Public Subnet in AZ 2
    Type: AWS::EC2::Subnet::Id
    Default: ''

  PublicSubnet3:
    Description: Public Subnet in AZ 3
    Type: AWS::EC2::Subnet::Id
    Default: ''

  InstanceType:
    Default: t2.large
    Description: Instance type of the EC2 Instance
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName

  RootVolumeSize:
    Default: '50'
    Description: Volume Size of the Root EBS
    Type: Number

  TowerLicenseKeyJson:
    Default: '{}'
    Description: Tower License file json data
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      "HVM64": "ami-0ff8a91507f77f867"
    us-east-2:
      "HVM64": "ami-03d64741867e7bb94"
    us-west-1:
      "HVM64": "ami-0bdb828fd58c52235"
    eu-west-1:
      "HVM64": "ami-047bb4163c506cd98"

Resources:

  PrivateKey:
    Type: Custom::RSAKey
    Properties:
      Name: /demo/private-key
      KeyAlias: alias/aws/ssm
      ServiceToken: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:binxio-cfn-secret-provider'

#######


  SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ssmget
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ssm:GetParameter'
                Resource: '*'

  TowerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SSMRole

  TowerExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Tower Cluster Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        ToPort: 443
        FromPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: "-1"
        SourceSecurityGroupName: default
        ToPort: 65535
        FromPort: 0

  TowerExternalSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref TowerExternalSecurityGroup
      IpProtocol: "-1"
      ToPort: 65535
      FromPort: 0
      SourceSecurityGroupId: !GetAtt TowerExternalSecurityGroup.GroupId

  TowerDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: 'awx'
      Engine: postgres
      EngineVersion: '10.14'
      MasterUsername: 'awx'
      DBInstanceClass: "db.t3.small"
      DBInstanceIdentifier: "tower"
      PubliclyAccessible: true
      StorageType: "gp2"
      SourceRegion:
        Ref: AWS::Region
      VPCSecurityGroups:
      - Ref: TowerExternalSecurityGroup
      AllocatedStorage: 30
      MasterUserPassword:
        Ref: DatabaseAdminPassword

  TowerInstance:
    Type: AWS::EC2::Instance
    DependsOn: ['TowerInstance2', 'TowerInstance3', 'PrivateKey', 'TowerDBInstance']
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', "a"]]
      IamInstanceProfile: !Ref TowerInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref "TowerExternalSecurityGroup"
          SubnetId: !Ref "PublicSubnet"
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe

            # Install EPEL for Ansible
            dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

            # Ensure Ansible is installed
            dnf -y install ansible python3 python3-pip
            python3 -m pip install --upgrade pip
            python3 -m pip install awscli

            PKEY=$(/usr/local/bin/aws --region=${region} ssm get-parameter --name /demo/private-key --with-decryption --query Parameter.Value --output text)

            # Configure Cluster SSH keys
            echo "$PKEY" > /home/ec2-user/.ssh/tower_rsa
            echo "${pubkey}" > /home/ec2-user/.ssh/tower_rsa.pub
            echo "${pubkey}" >> /home/ec2-user/.ssh/authorized_keys
            chown ec2-user.ec2-user /home/ec2-user/.ssh/tower_rsa /home/ec2-user/.ssh/tower_rsa.pub /home/ec2-user/.ssh/authorized_keys

            cd /tmp

            # Download ansible tower package
            curl -O https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.7.3-1.tar.gz

            # Unpack ansible tower package
            tar -xzf ansible-tower-setup-3.7.3-1.tar.gz

            pushd ansible-tower-setup-3.7.3-1

            mv inventory inventory.orig

            TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
            MY_HOSTNAME=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-hostname`

            ####
            cat <<EOF > inventory
            [tower]
            $MY_HOSTNAME
            ${tower2name}
            ${tower3name}

            [database]

            [all:vars]
            ansible_ssh_private_key_file=/home/ec2-user/.ssh/tower_rsa
            ansible_connection=ssh
            ansible_user=ec2-user
            ansible_become=yes
            ansible_become_method=sudo
            ansible_ssh_extra_args='-o StrictHostKeyChecking=no'

            tower_firewall_type='firewalld'

            admin_password=${admin_password}

            pg_host="${dbhost}"
            pg_port="${dbport}"

            pg_database='awx'
            pg_username='awx'
            pg_password=${database_admin_password}
            pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

            rabbitmq_username='awx'
            rabbitmq_password=${rmqpass}
            rabbitmq_cookie=${rmqcookie}
            EOF
            ####

            # Install Ansible Tower
            ./setup.sh

            if [ ${#tower_license} -gt 5 ]
            then
              LICENSE="{ \"eula_accepter\": true, ${tower_license:1}"
              curl -k -X POST -u admin:${admin_password} -H "Content-Type: application/json" --data "$(echo)$LICENSE" https://localhost:443/api/v2/config/
            fi

          - admin_password: !Ref 'TowerAdminPassword'
            database_admin_password: !Ref 'DatabaseAdminPassword'
            tower2name: !GetAtt TowerInstance2.PrivateDnsName
            tower3name: !GetAtt TowerInstance3.PrivateDnsName
            region: !Ref AWS::Region
            pubkey: !GetAtt 'PrivateKey.PublicKey'
            dbhost: !GetAtt 'TowerDBInstance.Endpoint.Address'
            dbport: !GetAtt 'TowerDBInstance.Endpoint.Port'
            rmqpass: !Ref 'RabbitMQPassword'
            rmqcookie: !Ref 'RabbitMQCookie'
            tower_license: !Ref 'TowerLicenseKeyJson'

  TowerInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      #AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', "b" ] ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
          - !Ref "TowerExternalSecurityGroup"
          SubnetId: !Ref "PublicSubnet2"
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe

            # Install EPEL for Ansible
            dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

            # Ensure Ansible is installed
            dnf -y install ansible

            echo "${pubkey}" > /home/ec2-user/.ssh/tower_rsa.pub
            echo "${pubkey}" >> /home/ec2-user/.ssh/authorized_keys
            chown ec2-user.ec2-user /home/ec2-user/.ssh/tower_rsa.pub

          - pubkey: !GetAtt 'PrivateKey.PublicKey'

  TowerInstance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', "c"]]
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref "TowerExternalSecurityGroup"
          SubnetId: !Ref "PublicSubnet3"
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe

            # Install EPEL for Ansible
            dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

            # Ensure Ansible is installed
            dnf -y install ansible

            echo "${pubkey}" > /home/ec2-user/.ssh/tower_rsa.pub
            echo "${pubkey}" >> /home/ec2-user/.ssh/authorized_keys
            chown ec2-user.ec2-user /home/ec2-user/.ssh/tower_rsa.pub

          - pubkey: !GetAtt 'PrivateKey.PublicKey'

  TowerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: TowerTargets
      Port: '443'
      Protocol: 'TCP'
      TargetType: instance
      Targets:
        - Id: !Ref 'TowerInstance'
          Port: 443
        - Id: !Ref 'TowerInstance2'
          Port: 443
        - Id: !Ref 'TowerInstance3'
          Port: 443
      VpcId: !Ref 'VpcId'

  TowerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: 'network'
      IpAddressType: 'ipv4'
      Name: 'TowerLoadBalancer'
      Scheme: 'internet-facing'
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

  TowerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TowerTargetGroup
      LoadBalancerArn:
        Ref: TowerLoadBalancer
      Port: 443
      Protocol: TCP

  TowerDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      Comment: Tower Instance.
      Name: !Join [ '', [ "tower.", !Ref 'HostedZoneName' ] ]
      Type: CNAME
      TTL: '900'
      ResourceRecords:
      - !GetAtt TowerLoadBalancer.DNSName
