AWSTemplateFormatVersion: 2010-09-09

Description: Create Ansible Tower single node cluster

Parameters:

#  VpcCidr:
#    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-4]))$
#    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-24.
#    Default: 10.0.0.0/16
#    Description: CIDR block for VPC.
#    Type: String

  VpcId:
    Description: The VPC-scoped resources will belong to this VPC.
    Type: AWS::EC2::VPC::Id

  HostedZoneId:
    Description: The Route53 public zone ID to register the targets with, such as Z21IXYZABCZ2A4.
    Type: String

  HostedZoneName:
    Description: The Route53 zone to register the targets with, such as example.com. Omit the trailing period.
    Type: String
    Default: "example.com"

  TowerAdminPassword:
    Description: Ansible Tower admin password.
    Type: String
    Default: "redhat2020"

  DatabaseAdminPassword:
    Description: Database Admin Password. No special characters.
    Type: String
    Default: "redhat2020"

  PublicSubnet:
    Description: The internet-facing subnet.
    Type: AWS::EC2::Subnet::Id

  InstanceType:
    Default: t2.large
    Description: Instance type of the EC2 Instance
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName

  RootVolumeSize:
    Default: '50'
    Description: Volume Size of the Root EBS
    Type: Number

Mappings: 
  RegionMap: 
    us-east-1: 
      "HVM64": "ami-0ff8a91507f77f867"
    us-east-2:
      "HVM64": "ami-03d64741867e7bb94"
    us-west-1: 
      "HVM64": "ami-0bdb828fd58c52235"
    eu-west-1: 
      "HVM64": "ami-047bb4163c506cd98"

Resources:

  TowerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Tower Cluster Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        ToPort: 443
        FromPort: 443
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  TowerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet:
        - !Ref "TowerSecurityGroup"
        SubnetId: !Ref "PublicSubnet"
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe
            cd /tmp

            # Download ansible tower package
            curl -O https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-3.7.3-1.tar.gz

            # Unpack ansible tower package
            tar -xzf ansible-tower-setup-3.7.3-1.tar.gz

            pushd ansible-tower-setup-3.7.3-1

            # Configure inventory
            ADMIN_PASSWORD=${admin_password}
            PG_PASSWORD=${database_admin_password}

            sed -i "s|admin_password.*|admin_password='$ADMIN_PASSWORD'|" inventory

            sed -i "s|pg_password.*|pg_password='$PG_PASSWORD'|" inventory

            # Install Ansible Tower
            ./setup.sh
          - admin_password: !Ref 'TowerAdminPassword'
            database_admin_password: !Ref 'DatabaseAdminPassword'

  TowerIPAddress:
    Type: AWS::EC2::EIP

  TowerIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'TowerInstance'
      EIP: !Ref 'TowerIPAddress'

  TowerDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'HostedZoneId'
      Comment: Tower Instance.
      Name: !Join [ '', [ "tower.", !Ref 'HostedZoneName' ] ]
      Type: A
      TTL: '900'
      ResourceRecords:
      - !Ref TowerIPAddress

Outputs:
  TowerInstanceId:
    Description: Tower Instance ID.
    Value: !Ref TowerInstance

  BootstrapPublicIp:
    Description: The tower node public IP address.
    Value: !GetAtt TowerInstance.PublicIp

  BootstrapPrivateIp:
    Description: The tower node private IP address.
    Value: !GetAtt TowerInstance.PrivateIp

  TowerIPAddress:
    Description: IP address of the newly created Tower Instance
    Value: !Ref 'TowerIPAddress'
